
include:
  - project: 'rv/it/int/rivos-sdk'
    ref: rivos/main
    file: '/packager/gitlab-ci-packaging-helper.yml'

variables:
  CACHE_VERSION: "v6"
  BUILD_JDK_VERSION: 20
  BINUTILS_DIR: binutils-2.38
  GTEST_TAG: v1.13.0

prepare-version:
  after_script:
    - |
      source make/conf/version-numbers.conf
      if test -n "${CI_COMMIT_TAG}" && test "${CI_COMMIT_TAG}" =~ '^jdk\-\(.*\)-rivos$'; then
        echo "JDK_VERSION_PKG=$(echo "${CI_COMMIT_TAG}" | sed 's/^jdk-\(.*\)-rivos$/\1/')" >> gitvars.env
        echo "JDK_VERSION_TAG=${JDK_VERSION_PKG}" >> gitvars.env
        echo "JDK_VERSION_PRE=ea" >> gitvars.env
        echo "JDK_VERSION_OPT=" >> gitvars.env
      else
        echo "JDK_VERSION_PKG=${DEFAULT_VERSION_FEATURE}" >> gitvars.env
        echo "JDK_VERSION_TAG=${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}" >> gitvars.env
        echo "JDK_VERSION_PRE=internal" >> gitvars.env
        echo "JDK_VERSION_OPT=${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}" >> gitvars.env
      fi
    # Debugging helper
    - cat gitvars.env

.create-sysroot:
  stage: prebuild
  image: ubuntu:20.04
  cache:
    - when: on_success
      key: sysroot-${UBUNTU_CODENAME}-${PKG_ARCH}-${CACHE_VERSION}
      paths:
        - sysroot-${UBUNTU_CODENAME}-${PKG_ARCH}
  script:
    # early exit if sysroot-${UBUNTU_CODENAME}-${PKG_ARCH} is coming from the cache
    - test -d sysroot-${UBUNTU_CODENAME}-${PKG_ARCH} && exit 0
    - apt-get update
    - apt-get install -y debootstrap qemu-user-static
    - |
      qemu-debootstrap                                                         \
        --verbose                                                              \
        --arch=${PKG_ARCH}                                                     \
        --components=main,universe                                             \
        --include=symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev \
        ${UBUNTU_CODENAME}                                                     \
        sysroot-${UBUNTU_CODENAME}-${PKG_ARCH}                                 \
      || (cat sysroot-${UBUNTU_CODENAME}-${PKG_ARCH}/debootstrap/debootstrap.log; exit 1)
    - chroot sysroot-${UBUNTU_CODENAME}-${PKG_ARCH} symlinks -cr .
    - rm -rf sysroot-${UBUNTU_CODENAME}-${PKG_ARCH}/{dev,proc,run,sys}
  artifacts:
    when: always
    paths:
      - sysroot-${UBUNTU_CODENAME}-${PKG_ARCH}

create-sysroot-amd64:
  extends: .create-sysroot
  dependencies:
    - prepare-version
  needs:
    - prepare-version
  variables:
    PKG_ARCH: amd64

create-sysroot-riscv64:
  extends: .create-sysroot
  dependencies:
    - prepare-version
  needs:
    - prepare-version
  variables:
    PKG_ARCH: riscv64

.build-linux:
  stage: build
  image: ubuntu:20.04
  variables:
    CONF_NAME: linux-${PKG_ARCH}-${DEBUG_LEVEL}
  script:
    - apt-get update
    - |
      apt-get install -y                                                       \
        autoconf                                                               \
        build-essential                                                        \
        curl                                                                   \
        file                                                                   \
        g++                                                                    \
        gcc                                                                    \
        git                                                                    \
        $(test "${PKG_ARCH}" = "riscv64" && echo "g++-riscv64-linux-gnu" || true) \
        $(test "${PKG_ARCH}" = "riscv64" && echo "gcc-riscv64-linux-gnu" || true) \
        unzip                                                                  \
        zip                                                                    \
        zlib1g-dev
    - |
      mkdir -p /usr/lib/jvm/temurin-${BUILD_JDK_VERSION}
      curl -L https://api.adoptium.net/v3/binary/latest/${BUILD_JDK_VERSION}/ea/linux/x64/jdk/hotspot/normal/eclipse\?project\=jdk \
        | tar -xzf - -C /usr/lib/jvm/temurin-${BUILD_JDK_VERSION} --strip-components 1
    - |
      mkdir ${BINUTILS_DIR}
      curl -L https://ftp.gnu.org/gnu/binutils/${BINUTILS_DIR}.tar.gz \
        | tar -xzf - -C ${BINUTILS_DIR} --strip-components 1
    - git clone https://github.com/google/googletest.git -b ${GTEST_TAG} googletest
    - |
      bash configure                                                           \
        --with-debug-level=${DEBUG_LEVEL}                                      \
        --openjdk-target=${PKG_ARCH}-linux-gnu                                 \
        --with-conf-name=${CONF_NAME}                                          \
        --with-vendor-name="Rivos Inc"                                         \
        --with-version-pre="${JDK_VERSION_PRE}"                                \
        --with-version-opt="${JDK_VERSION_OPT}"                                \
        --with-sysroot=$(pwd)/sysroot-${UBUNTU_CODENAME}-${PKG_ARCH}           \
        --with-boot-jdk=/usr/lib/jvm/temurin-${BUILD_JDK_VERSION}              \
        --disable-precompiled-headers                                          \
        --with-zlib=system                                                     \
        --with-gtest=$(pwd)/googletest                                         \
        --with-hsdis=binutils                                                  \
        --with-binutils-src=${BINUTILS_DIR}                                    \
        --enable-hsdis-bundling
    - make jdk-image test-image LOG_LEVEL=info
  artifacts:
    when: always
    paths:
      - config.log  # in case of error during configure
      - build/${CONF_NAME}/*.log
      - build/${CONF_NAME}/Makefile
      - build/${CONF_NAME}/make-support
      - build/${CONF_NAME}/*.gmk
      - build/${CONF_NAME}/images/jdk
      - build/${CONF_NAME}/images/test

build-linux-amd64-fastdebug:
  extends: .build-linux
  dependencies:
    - prepare-version
    - create-sysroot-amd64
  needs:
    - prepare-version
    - create-sysroot-amd64
  variables:
    PKG_ARCH: amd64
    DEBUG_LEVEL: fastdebug

build-linux-riscv64-fastdebug:
  extends: .build-linux
  dependencies:
    - prepare-version
    - create-sysroot-riscv64
  needs:
    - prepare-version
    - create-sysroot-riscv64
  variables:
    PKG_ARCH: riscv64
    DEBUG_LEVEL: fastdebug

build-linux-amd64-release:
  extends: .build-linux
  dependencies:
    - prepare-version
    - create-sysroot-amd64
  needs:
    - prepare-version
    - create-sysroot-amd64
  variables:
    PKG_ARCH: amd64
    DEBUG_LEVEL: release

build-linux-riscv64-release:
  extends: .build-linux
  dependencies:
    - prepare-version
    - create-sysroot-riscv64
  needs:
    - prepare-version
    - create-sysroot-riscv64
  variables:
    PKG_ARCH: riscv64
    DEBUG_LEVEL: release

.run-gtests:
  stage: test
  image: ubuntu:20.04
  variables:
    CONF_NAME: linux-${PKG_ARCH}-${DEBUG_LEVEL}
  script:
    - apt-get update
    - |
      apt-get install -y                                                       \
        build-essential                                                        \
        curl
    - |
      mkdir -p /usr/lib/jvm/temurin-${BUILD_JDK_VERSION}
      curl -L https://api.adoptium.net/v3/binary/latest/${BUILD_JDK_VERSION}/ea/linux/x64/jdk/hotspot/normal/eclipse\?project\=jdk \
        | tar -xzf - -C /usr/lib/jvm/temurin-${BUILD_JDK_VERSION} --strip-components 1
    # jtreg is not needed to run the gtests but make-prebuilt requires JT_HOME to point to a dir.
    # We'll just point it to an empty dir, it's not worth checking out jtreg for this.
    - mkdir $(pwd)/jtreg
    # QEMU_LD_PREFIX and QEMU_CPU are only needed for risc v but it's easier to just set it for all configurations
    - make test-prebuilt \
        CONF=${CONF_NAME} \
        QEMU_LD_PREFIX=$(pwd)/sysroot-${UBUNTU_CODENAME}-${PKG_ARCH} \
        QEMU_CPU="rivos-sentinel,m5ops=true" \
        BOOT_JDK=/usr/lib/jvm/temurin-${BUILD_JDK_VERSION} \
        JDK_IMAGE_DIR=$(pwd)/build/${CONF_NAME}/images/jdk \
        TEST_IMAGE_DIR=$(pwd)/build/${CONF_NAME}/images/test \
        JT_HOME=$(pwd)/jtreg \
        TEST="gtest:all"

run-gtests-amd64-fastdebug:
  extends: .run-gtests
  dependencies:
    - prepare-version
    - create-sysroot-amd64
    - build-linux-amd64-fastdebug
  needs:
    - prepare-version
    - create-sysroot-amd64
    - build-linux-amd64-fastdebug
  variables:
    PKG_ARCH: amd64
    DEBUG_LEVEL: fastdebug

run-gtests-riscv64-fastdebug:
  extends: .run-gtests
  tags: ["22.04"]
  dependencies:
    - prepare-version
    - create-sysroot-riscv64
    - build-linux-riscv64-fastdebug
  needs:
    - prepare-version
    - create-sysroot-riscv64
    - build-linux-riscv64-fastdebug
  variables:
    PKG_ARCH: riscv64
    DEBUG_LEVEL: fastdebug

run-gtests-amd64-release:
  extends: .run-gtests
  dependencies:
    - prepare-version
    - create-sysroot-amd64
    - build-linux-amd64-release
  needs:
    - prepare-version
    - create-sysroot-amd64
    - build-linux-amd64-release
  variables:
    PKG_ARCH: amd64
    DEBUG_LEVEL: release

run-gtests-riscv64-release:
  extends: .run-gtests
  tags: ["22.04"]
  dependencies:
    - prepare-version
    - create-sysroot-riscv64
    - build-linux-riscv64-release
  needs:
    - prepare-version
    - create-sysroot-riscv64
    - build-linux-riscv64-release
  variables:
    PKG_ARCH: riscv64
    DEBUG_LEVEL: release

package-tar:
  stage: deploy
  image: ubuntu:20.04
  dependencies:
    - prepare-version
    - build-linux-amd64-release
    - build-linux-riscv64-release
  needs:
    - prepare-version
    - build-linux-amd64-release
    - build-linux-riscv64-release
  script:
    - apt-get update
    - apt-get install -y curl
    - tar -czf jdk-${JDK_VERSION_TAG}-linux-amd64.tar.gz -C build/linux-amd64-release/images jdk
    - 'curl -i --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file jdk-${JDK_VERSION_TAG}-linux-amd64.tar.gz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/jdk/${JDK_VERSION_TAG}/jdk-${JDK_VERSION_TAG}-linux-amd64.tar.gz"'
    - tar -czf jdk-${JDK_VERSION_TAG}-linux-riscv64.tar.gz -C build/linux-riscv64-release/images jdk
    - 'curl -i --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file jdk-${JDK_VERSION_TAG}-linux-riscv64.tar.gz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/jdk/${JDK_VERSION_TAG}/jdk-${JDK_VERSION_TAG}-linux-riscv64.tar.gz"'

.package-deb:
  extends: .deploy-deb
  variables:
    PKG_LICENSE: "GPL-2.0 license"
    PKG_UPSTREAM_VERSION: "${JDK_VERSION_PKG}"
  before_script:
    # PKG_DIRECTORIES must be set
    - test -n "${PKG_DIRECTORIES}" || exit 1
    # PKG_ARCH must be set
    - test -n "${PKG_ARCH}" || exit 1
    # clean up pre-built binaries from the rivos-sdk
    - rm -rf $(echo "${PKG_DIRECTORIES}" | tr ';' ' ')
    # move the previous temporary install
    - |
      cp -av build/linux-${PKG_ARCH}-release/images/jdk /rivos/
      if [ "${PKG_ARCH}" = "amd64" ]; then
        # put linux-riscv64 build in sysroot
        mkdir -p /rivos/sysroot/riscv/rivos
        cp -av build/linux-riscv64-release/images/jdk /rivos/sysroot/riscv/rivos
      fi
    - |
      if [ "${PKG_DBG}" = "true" ]; then
        find $(echo "${PKG_DIRECTORIES}" | tr ';' ' ') \( -xtype f -or -xtype l \) -not -name '*.debuginfo' -exec rm -f {} \; -print
        find $(echo "${PKG_DIRECTORIES}" | tr ';' ' ') -type d -print | sort -r | xargs -I{} bash -c "rmdir {} || true"
      else
        # remove *.debuginfo files, they take a lot of space
        find $(echo "${PKG_DIRECTORIES}" | tr ';' ' ') -type f -name '*.debuginfo' -exec rm -f {} \; -print
      fi

package-deb-amd64:
  extends: .package-deb
  dependencies:
    - prepare-version
    - build-linux-amd64-release
    - build-linux-riscv64-release
  needs:
    - prepare-version
    - build-linux-amd64-release
    - build-linux-riscv64-release
  variables:
    PKG_DIRECTORIES: "/rivos/jdk;/rivos/sysroot/riscv/rivos/jdk"
    PKG_ARCH: "amd64"

package-deb-riscv64:
  extends: .package-deb
  dependencies:
    - prepare-version
    - build-linux-riscv64-release
  needs:
    - prepare-version
    - build-linux-riscv64-release
  variables:
    PKG_DIRECTORIES: "/rivos/jdk"
    PKG_ARCH: "riscv64"

package-deb-dbg-amd64:
  extends: .package-deb
  dependencies:
    - prepare-version
    - build-linux-amd64-release
    - build-linux-riscv64-release
  needs:
    - prepare-version
    - build-linux-amd64-release
    - build-linux-riscv64-release
  variables:
    PKG_NAME: "${PROJECT_NAME}-dbg"
    PKG_DIRECTORIES: "/rivos/jdk;/rivos/sysroot/riscv/rivos/jdk"
    PKG_ARCH: "amd64"
    PKG_DBG: "true"

package-deb-dbg-riscv64:
  extends: .package-deb
  dependencies:
    - prepare-version
    - build-linux-riscv64-release
  needs:
    - prepare-version
    - build-linux-riscv64-release
  variables:
    PKG_NAME: "${PROJECT_NAME}-dbg"
    PKG_DIRECTORIES: "/rivos/jdk"
    PKG_ARCH: "riscv64"
    PKG_DBG: "true"

# deploy-module-ubuntu:
#   extends: .deploy-module
#   dependencies:
#     - prepare-version
#     - build-linux-amd64
#   needs:
#     - prepare-version
#     - build-linux-amd64
#   variables:
#     CONTENT_PATH: "build/linux-amd64/images/jdk"
#     UBUNTU2204_INSTALL_PATH: "${SDK_MODULES_ROOT}/ubuntu.22.04/x86_64/${CI_PROJECT_NAME}/${VERSION_TAG}"

# Rebuild the rivos-sdk where we are exporting the artifacts built here.
update-sdk:
  extends: .update-sdk
